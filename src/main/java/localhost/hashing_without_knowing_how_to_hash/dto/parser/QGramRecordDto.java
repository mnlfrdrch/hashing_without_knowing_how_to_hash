package localhost.hashing_without_knowing_how_to_hash.dto.parser;

import lombok.AllArgsConstructor;
import lombok.Getter;

import java.util.HashSet;
import java.util.Set;

/**
 * Holds all the q-grams to a record, which is specified by its id
 * Does also support a nice representation to be printed on screen, implemented in the toString()
 * Implements simple preprocessing functionalities
 * QGramRecordDto objects are generated by PRIMATParser
 */
@AllArgsConstructor
public class QGramRecordDto {

    @Getter
    String id;
    @Getter
    Set<String> qgrams;

    /**
     * Formatting to print QGramRecordDto to screen
     * @return formatted string representation
     */
    @Override
    public String toString(){

        String idHeader="id=";
        String nGramsHeader="ngrams=";

        StringBuilder sb=new StringBuilder("");
        sb.append(idHeader).append(id).append(" ").append(nGramsHeader).append("{");

        boolean hadLooped=false;
        if(qgrams ==null){
            qgrams=new HashSet<>();
        }
        for(String ngram: qgrams){
            sb.append(ngram);
            sb.append(", ");
            hadLooped=true;
        }

        //Gets rid of redundant ", "
        if(hadLooped){
            int sbLen=sb.length();
            sb.replace(sbLen-2,sbLen, "");
        }

        sb.append("}");
        return sb.toString();
    }

    /**
     * Applies preprocessing to each qgram.
     * Only converts lowercase letters to uppercase letters
     */
    public void preprocess(){
        Set<String> preprocessedQGrams=new HashSet<>();
        for (String qgram: qgrams){
            preprocessedQGrams.add(qgram.toUpperCase());
        }
        qgrams =preprocessedQGrams;
    }
}
