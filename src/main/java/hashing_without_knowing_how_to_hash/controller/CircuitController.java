package main.java.hashing_without_knowing_how_to_hash.controller;

import localhost.hashing_without_knowing_how_to_hash.constants.ControllerPaths;
import localhost.hashing_without_knowing_how_to_hash.dto.circuit.CircuitsContainerDto;
import localhost.hashing_without_knowing_how_to_hash.service.CircuitService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Controller for sharing the garbled circuit of the individual hash function generated by each party on its on
 */
@RestController
@RequestMapping(path = ControllerPaths.CIRCUIT)
public class CircuitController {

    private final CircuitService circuitService;

    @Autowired
    public CircuitController(CircuitService circuitService){
        this.circuitService=circuitService;
    }

    /**
     * Provides all the garbled circuits to evaluate a single hash value
     * Transfers a big chunk of data
     * Transmission might therefore take some time
     * @return newly built garbled circuits
     */
    @GetMapping
    public CircuitsContainerDto getCircuit(){
        return circuitService.getCircuit();
    }

    /**
     * Provides binary information obout the state of the formula cache
     * Formula cache needs to be loaded, before building the circuit is possible
     * Gives therefore important meta information for the protocol procedure to know how long to wait and when to start the secure evaluation
     * @return *true* if 'getCircuit()' can be called, else *false*
     */
    @GetMapping(path = ControllerPaths.STATUS)
    public boolean getStatus(){
        return circuitService.getStatus();
    }
}
